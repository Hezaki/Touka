#+title: Emacs
#+author: Hezaki

* UI
** Font and theme
#+begin_src emacs-lisp
(set-frame-font "JetBrainsMono NF 13" nil t)
(setq default-frame-alist '((font . "JetBrainsMono NF 13")))
(setq global-prettify-symbols-mode t)
#+end_src
** Faces
#+begin_src emacs-lisp
(custom-set-faces
  `(org-block-begin-line ((t (:background ,#${config.lib.stylix.colors.base00}))))
  `(org-block-end-line ((t (:background ,#${config.lib.stylix.colors.base00}))))
  `(mode-line ((t (:background ,#${config.lib.stylix.colors.base00}))))
  `(line-number ((t (:background ,#${config.lib.stylix.colors.base00})))))
#+end_src
** Variables
#+begin_src emacs-lisp
(custom-set-variables
	'(global-display-line-numbers-mode t)
	'(global-visual-line-mode t)
	'(global-tree-sitter-mode t)
	'(menu-bar-mode nil)
	'(tab-bar-new-button-show nil)
	'(tab-bar-close-button-show nil)
	'(tab-line-separator "")
	'(scroll-bar-mode nil)
	'(tab-bar-mode nil)
	'(tool-bar-mode nil)
	'(recentf-mode t)
	'(global-hl-line-mode t)
	'(pixel-scroll-precision-mode t))
  '(highlight-indent-guides-method 'character)
#+end_src
** All the icons
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
#+end_src
** Smartparens
#+begin_src emacs-lisp
(smartparens-global-mode t)
#+end_src
** Scrolling
#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-margin 5
      scroll-conservatively 10000
      next-screen-context-lines 5
      line-move-visual nil)
#+end_src
* Basic
#+begin_src emacs-lisp
(set-fringe-mode 0)
(savehist-mode t)
(save-place-mode t)
(global-auto-revert-mode t)
(set-window-margins (selected-window) 0 0)
(set-frame-parameter nil 'internal-border-width 0)
(setq inhibit-startup-screen t
      standard-indent 2
      column-number-mode t
      e-short-answers t
      blink-cursor-mode nil
      inhibit-compacting-font-caches t
      auto-save-interval 1000
      package-enable-at-startup nil
      pixel-resolution-fine-flag t
      select-enable-clipboard t
      indent-line-function 'insert-tab
      line-spacing 0
      make-backup-files nil)
#+end_src
* Development
** Evil
#+begin_src emacs-lisp
(evil-mode t)
(setq evil-search-module 'evil-search
      evil-want-integration t
      evil-want-keybinding nil)
#+end_src

*** Evil collection
#+begin_src emacs-lisp
;; (evil-collection-init)
#+end_src
*** Anzu
#+BEGIN_src emacs-lisp
(global-anzu-mode t)
#+END_src
** Org
#+begin_src emacs-lisp
(electric-indent-mode nil)
(setq org-auto-align-tags nil
	  org-edit-src-content-indentation 0
	  org-tags-column 0
	  org-auto-align-tags nil
	  org-catch-invisible-edits 'show-and-error
	  org-special-ctrl-a/e t
	  org-insert-heading-respect-content t
	  org-hide-emphasis-markers t
	  org-pretty-entities t
	  org-startup-indented t
      org-ellipsis " â–¾"
      org-hide-emphasis-markers t
      org-pretty-entities t
      org-src-fontify-natively t
      org-fontify-whole-heading-line t
      org-fontify-quote-and-verse-blocks t
   	  org-edit-src-content-indentation 2
      org-hide-block-startup nil
      org-src-tab-acts-natively t
      org-src-preserve-indentation nil
      org-startup-folded t
      org-cycle-separator-lines 2
      org-hide-leading-stars t
      org-highlight-latex-and-related '(native)
      org-goto-auto-isearch nil)
#+end_src
*** Org bullets 
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'org-bullets-mode)
#+end_src
*** Visual
#+begin_src emacs-lisp
(defun org-visual-mode ()
  (olivetti-mode)
  (setq-local display-line-numbers-type nil))
(add-hook 'org-mode-hook 'org-visual-mode)
#+end_src
*** Evil org mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'evil-org-mode)
#+end_src
*** TOC
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'toc-org-mode)
#+end_src
*** Org level headers
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.180))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.140))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.120))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.080))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.040))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.020)))))
#+end_src
*** Preserve Indentation On Org-Babel-Tangle
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src
*** Valign
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'valign-mode)
#+end_src
** Python
#+begin_src emacs-lisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i")
#+end_src
** Affe
#+begin_src emacs-lisp
(defun affe-find-/ ()
 (interactive)
 (affe-find "."))

(defun affe-grep-/ ()
 (interactive)
 (affe-grep "."))
#+end_src
** Vterm
#+begin_src emacs-lisp
(defun vtermus ()
 (kill-buffer "*scratch*")
 (setq-local display-line-numbers-type nil)
 (hl-line-mode nil))
(add-hook 'vterm-mode-hook #'vtermus)
#+end_src
** Keybind
#+begin_src emacs-lisp
(general-define-key
	:states '(normal visual)
	"C-=" 'text-scale-increase
	"C--" 'text-scale-decrease
    "M-\\" 'evil-window-vsplit
    "M--" 'evil-window-split
	"gc" 'comment-line
	"ff" 'affe-find-/
	"fg" 'affe-grep-/
    "C-<tab>" 'evil-switch-to-windows-last-buffer
	"ts" 'display-buffe)
#+end_src
** Corfu
#+begin_src emacs-lisp
(global-corfu-mode t)
(corfu-history-mode t)
(corfu-popupinfo-mode t)
(setq corfu-auto t
	  corfu-cycle t
      corfu-auto-delay 0
      corfu-auto-prefix 1 
      tab-always-indent 'complete)
#+end_src
*** Icons
#+begin_src emacs-lisp
(add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
#+end_src
** Eglot
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'eglot-ensure)
#+end_src
** Treesitter
#+begin_src emacs-lisp
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
** Rainbow mode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-mode)
#+end_src
** Beacon
#+begin_src emacs-lisp
(beacon-mode t)
#+end_src
** Slime
#+begin_src emacs-lisp
(setq inferior-lisp-program "sbcl")
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
** Vertico
#+begin_src emacs-lisp
(vertico-mode t)
(vertico-reverse-mode t)
(setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args)))
#+end_src
** Orderless
#+begin_src emacs-lisp
(setq completion-styles '(orderless)
      completion-category-overrides '((file (styles basic partial-completion)))
      orderless-skip-highlighting (lambda () selectrum-is-active)
	  selectrum-highlight-candidates-function #'orderless-highlight-matches)
#+end_src
** Doom modeline
#+begin_src emacs-lisp
(doom-modeline-mode 1)
(setq doom-modeline-icon t
	  doom-modeline-bar-width 0
	  doom-modeline-buffer-state-icon t
	  doom-modeline-major-mode-color-icon t
	  doom-modeline-persp-name t
      doom-modeline-persp-icon t)
#+end_src
** Marginalia
#+begin_src emacs-lisp
(marginalia-mode t)
#+end_src
** Emmet mode
#+begin_src emacs-lisp
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook  'emmet-mode)
#+end_src
** Apheleia
#+begin_src emacs-lisp
(apheleia-global-mode t)
#+end_src
** Olivetti
#+begin_src emacs-lisp
(add-hook 'olivetti-mode-on-hook (lambda () (olivetti-set-width 100)))
#+end_src
** Garbage collection
#+begin_src emacs-lisp
(gcmh-mode t)
(setq gc-cons-threshold 402653184
	  gc-cons-percentage 0.4)
(add-hook 'emacs-startup-hook
	(lambda ()
	(message "*** Emacs loaded in %s with %d garbage collections."
	(format "%.2f seconds"
	(float-time
	(time-subtract after-init-time before-init-time)))
	gcs-done)))
#+end_src
